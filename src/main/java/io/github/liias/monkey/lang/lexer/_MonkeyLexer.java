/* The following code was generated by JFlex 1.4.3 on 25.03.16 3:25 */

package io.github.liias.monkey.lang.lexer;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static io.github.liias.monkey.lang.psi.MonkeyTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 25.03.16 3:25 from the specification file
 * <tt>D:/Projects/monkey/src/main/java/io/github/liias/monkey/lang/lexer/_MonkeyLexer.flex</tt>
 */
public class _MonkeyLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\2\1\1\1\1\1\1\22\0\1\1\1\4\1\17"+
    "\1\0\1\6\1\71\1\66\1\21\1\57\1\60\1\5\1\67\1\61"+
    "\1\70\1\14\1\3\1\11\11\7\1\24\1\22\1\63\1\65\1\64"+
    "\1\23\1\0\1\75\1\74\1\13\1\16\1\77\1\15\2\6\1\103"+
    "\2\6\1\10\2\6\1\102\1\106\1\100\1\76\1\104\1\6\1\105"+
    "\1\101\1\6\1\12\2\6\1\55\1\20\1\56\1\72\1\6\1\0"+
    "\1\27\1\50\1\25\1\44\1\40\1\31\1\45\1\47\1\35\1\6"+
    "\1\51\1\26\1\43\1\33\1\36\2\6\1\37\1\30\1\34\1\32"+
    "\1\42\1\41\1\46\1\52\1\6\1\53\1\62\1\54\1\73\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\4\1\5\1\6\1\7\2\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\21\7\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\3\7\1\0\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\0\1\1\1\46\1\47\1\1\1\0\1\50\3\0"+
    "\1\51\3\7\1\52\15\7\1\53\1\7\1\54\7\7"+
    "\1\55\4\7\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\1\70\3\7\1\71\1\72"+
    "\1\73\1\0\4\7\1\74\5\7\1\75\3\7\1\76"+
    "\1\7\1\77\7\7\1\100\2\7\1\101\5\7\1\73"+
    "\1\7\1\102\12\7\1\103\1\104\3\7\1\105\1\106"+
    "\7\7\1\107\1\7\1\110\1\111\1\112\3\7\1\113"+
    "\2\7\1\114\1\7\1\115\3\7\1\116\3\7\1\117"+
    "\1\120\1\121\1\7\1\122\1\123\2\7\1\124\1\7"+
    "\1\125\1\7\1\126\1\7\1\127\2\7\1\130\1\7"+
    "\1\131\1\132\1\133\1\134\2\7\1\135";

  private static int [] zzUnpackAction() {
    int [] result = new int[227];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\325\0\u011c\0\u0163\0\u01aa\0\u01f1"+
    "\0\u0238\0\u027f\0\u02c6\0\u030d\0\107\0\107\0\107\0\u0354"+
    "\0\u039b\0\u03e2\0\u0429\0\u0470\0\u04b7\0\u04fe\0\u0545\0\u058c"+
    "\0\u05d3\0\u061a\0\u0661\0\u06a8\0\u06ef\0\u0736\0\u077d\0\u07c4"+
    "\0\107\0\107\0\107\0\107\0\107\0\107\0\107\0\u080b"+
    "\0\107\0\107\0\u0852\0\u0899\0\u08e0\0\u0927\0\u096e\0\107"+
    "\0\107\0\u09b5\0\u09fc\0\u0a43\0\u0a8a\0\u0ad1\0\107\0\107"+
    "\0\107\0\107\0\107\0\u027f\0\107\0\107\0\u0b18\0\u0b5f"+
    "\0\u02c6\0\107\0\u0ba6\0\u030d\0\u0bed\0\107\0\u0c34\0\u0c7b"+
    "\0\u0cc2\0\u01aa\0\u0d09\0\u0d50\0\u0d97\0\u0dde\0\u0e25\0\u0e6c"+
    "\0\u0eb3\0\u0efa\0\u0f41\0\u0f88\0\u0fcf\0\u1016\0\u105d\0\u01aa"+
    "\0\u10a4\0\u01aa\0\u10eb\0\u1132\0\u1179\0\u11c0\0\u1207\0\u124e"+
    "\0\u1295\0\u01aa\0\u12dc\0\u1323\0\u136a\0\u13b1\0\107\0\107"+
    "\0\107\0\107\0\107\0\107\0\107\0\107\0\107\0\107"+
    "\0\107\0\u13f8\0\u143f\0\u1486\0\u14cd\0\u1514\0\u0ad1\0\u155b"+
    "\0\u15a2\0\u15e9\0\u1630\0\u1677\0\u01aa\0\u16be\0\u1705\0\u174c"+
    "\0\u1793\0\u17da\0\u01aa\0\u1821\0\u1868\0\u18af\0\u01aa\0\u18f6"+
    "\0\u01aa\0\u193d\0\u1984\0\u19cb\0\u1a12\0\u1a59\0\u1aa0\0\u1ae7"+
    "\0\u01aa\0\u1b2e\0\u1b75\0\u01aa\0\u1bbc\0\u1c03\0\u1c4a\0\u1c91"+
    "\0\u1cd8\0\107\0\u1d1f\0\u01aa\0\u1d66\0\u1dad\0\u1df4\0\u1e3b"+
    "\0\u1e82\0\u1ec9\0\u1f10\0\u1f57\0\u1f9e\0\u1fe5\0\u01aa\0\u01aa"+
    "\0\u202c\0\u2073\0\u20ba\0\u01aa\0\u01aa\0\u2101\0\u2148\0\u218f"+
    "\0\u21d6\0\u221d\0\u2264\0\u22ab\0\u01aa\0\u22f2\0\u01aa\0\u01aa"+
    "\0\u01aa\0\u2339\0\u2380\0\u23c7\0\u01aa\0\u240e\0\u2455\0\u01aa"+
    "\0\u249c\0\u01aa\0\u24e3\0\u252a\0\u2571\0\u01aa\0\u25b8\0\u25ff"+
    "\0\u2646\0\u01aa\0\u01aa\0\u01aa\0\u268d\0\u01aa\0\u01aa\0\u26d4"+
    "\0\u271b\0\u01aa\0\u2762\0\u01aa\0\u27a9\0\u01aa\0\u27f0\0\u01aa"+
    "\0\u2837\0\u287e\0\u01aa\0\u28c5\0\u01aa\0\u01aa\0\u01aa\0\u01aa"+
    "\0\u290c\0\u2953\0\u01aa";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[227];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\7"+
    "\1\11\2\7\1\12\2\7\1\13\1\2\1\14\1\15"+
    "\1\16\1\17\1\20\1\7\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\2\7\1\37\1\40\2\7\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\4\7\1\63\2\7\1\64\2\7\110\0\2\3\107\0"+
    "\1\65\1\0\1\66\57\0\1\67\106\0\1\70\24\0"+
    "\1\71\61\0\1\72\27\0\6\7\1\0\2\7\6\0"+
    "\26\7\21\0\13\7\7\0\1\10\1\73\1\10\2\0"+
    "\1\74\1\75\1\76\7\0\1\73\2\0\1\75\12\0"+
    "\1\76\51\0\1\10\1\73\1\10\1\77\1\0\1\74"+
    "\1\75\1\76\7\0\1\73\2\0\1\75\12\0\1\76"+
    "\1\0\1\77\47\0\1\100\1\0\1\100\75\0\17\101"+
    "\1\102\1\103\66\101\20\104\1\105\1\106\65\104\6\0"+
    "\6\7\1\0\2\7\6\0\1\7\1\107\1\110\6\7"+
    "\1\111\14\7\21\0\13\7\6\0\6\7\1\0\2\7"+
    "\6\0\3\7\1\112\2\7\1\113\17\7\21\0\13\7"+
    "\6\0\6\7\1\0\2\7\6\0\7\7\1\114\4\7"+
    "\1\115\11\7\21\0\13\7\6\0\6\7\1\0\2\7"+
    "\6\0\2\7\1\116\2\7\1\117\2\7\1\120\1\121"+
    "\14\7\21\0\13\7\6\0\6\7\1\0\2\7\6\0"+
    "\3\7\1\122\22\7\21\0\13\7\6\0\6\7\1\0"+
    "\2\7\6\0\2\7\1\123\2\7\1\124\5\7\1\125"+
    "\12\7\21\0\13\7\6\0\6\7\1\0\2\7\6\0"+
    "\12\7\1\126\7\7\1\127\3\7\21\0\13\7\6\0"+
    "\6\7\1\0\2\7\6\0\4\7\1\130\1\7\1\131"+
    "\17\7\21\0\13\7\6\0\6\7\1\0\2\7\6\0"+
    "\12\7\1\132\13\7\21\0\13\7\6\0\6\7\1\0"+
    "\2\7\6\0\13\7\1\133\12\7\21\0\13\7\6\0"+
    "\6\7\1\0\2\7\6\0\1\7\1\134\4\7\1\135"+
    "\12\7\1\136\4\7\21\0\13\7\6\0\6\7\1\0"+
    "\2\7\6\0\22\7\1\137\3\7\21\0\13\7\6\0"+
    "\6\7\1\0\2\7\6\0\2\7\1\140\23\7\21\0"+
    "\13\7\6\0\6\7\1\0\2\7\6\0\11\7\1\141"+
    "\14\7\21\0\13\7\6\0\6\7\1\0\2\7\6\0"+
    "\11\7\1\142\1\7\1\143\12\7\21\0\13\7\6\0"+
    "\6\7\1\0\2\7\6\0\2\7\1\144\5\7\1\145"+
    "\15\7\21\0\13\7\6\0\6\7\1\0\2\7\6\0"+
    "\12\7\1\146\13\7\21\0\13\7\62\0\1\147\2\0"+
    "\1\150\105\0\1\151\1\152\106\0\1\153\1\154\105\0"+
    "\1\155\1\0\1\156\104\0\1\157\2\0\1\160\103\0"+
    "\1\161\27\0\6\7\1\0\2\7\6\0\26\7\21\0"+
    "\1\7\1\162\11\7\6\0\6\7\1\0\2\7\6\0"+
    "\26\7\21\0\6\7\1\163\4\7\6\0\6\7\1\0"+
    "\2\7\6\0\26\7\21\0\11\7\1\164\1\7\4\165"+
    "\1\166\102\165\5\167\1\170\101\167\7\0\1\77\1\0"+
    "\1\77\1\0\1\77\1\0\2\77\6\0\1\77\1\0"+
    "\1\77\1\0\1\77\6\0\1\77\3\0\1\77\3\0"+
    "\1\77\23\0\2\77\1\0\1\77\16\0\1\100\1\0"+
    "\1\100\3\0\1\75\1\76\12\0\1\75\12\0\1\76"+
    "\42\0\2\101\1\0\104\101\2\104\1\0\104\104\6\0"+
    "\6\7\1\0\2\7\6\0\2\7\1\171\23\7\21\0"+
    "\13\7\6\0\6\7\1\0\2\7\6\0\3\7\1\172"+
    "\3\7\1\173\16\7\21\0\13\7\6\0\6\7\1\0"+
    "\2\7\6\0\6\7\1\174\17\7\21\0\13\7\6\0"+
    "\6\7\1\0\2\7\6\0\17\7\1\175\6\7\21\0"+
    "\13\7\6\0\6\7\1\0\2\7\6\0\2\7\1\176"+
    "\23\7\21\0\13\7\6\0\6\7\1\0\2\7\6\0"+
    "\10\7\1\177\15\7\21\0\13\7\6\0\6\7\1\0"+
    "\2\7\6\0\1\7\1\200\24\7\21\0\13\7\6\0"+
    "\6\7\1\0\2\7\6\0\6\7\1\201\17\7\21\0"+
    "\13\7\6\0\6\7\1\0\2\7\6\0\6\7\1\202"+
    "\17\7\21\0\13\7\6\0\6\7\1\0\2\7\6\0"+
    "\12\7\1\203\13\7\21\0\13\7\6\0\6\7\1\0"+
    "\2\7\6\0\10\7\1\204\15\7\21\0\13\7\6\0"+
    "\6\7\1\0\2\7\6\0\7\7\1\205\16\7\21\0"+
    "\13\7\6\0\6\7\1\0\2\7\6\0\1\7\1\206"+
    "\24\7\21\0\13\7\6\0\6\7\1\0\2\7\6\0"+
    "\14\7\1\207\11\7\21\0\13\7\6\0\6\7\1\0"+
    "\2\7\6\0\5\7\1\210\17\7\1\211\21\0\13\7"+
    "\6\0\6\7\1\0\2\7\6\0\12\7\1\212\13\7"+
    "\21\0\13\7\6\0\6\7\1\0\2\7\6\0\3\7"+
    "\1\213\22\7\21\0\13\7\6\0\6\7\1\0\2\7"+
    "\6\0\7\7\1\214\16\7\21\0\13\7\6\0\6\7"+
    "\1\0\2\7\6\0\3\7\1\215\22\7\21\0\13\7"+
    "\6\0\6\7\1\0\2\7\6\0\5\7\1\216\20\7"+
    "\21\0\13\7\6\0\6\7\1\0\2\7\6\0\7\7"+
    "\1\217\16\7\21\0\13\7\6\0\6\7\1\0\2\7"+
    "\6\0\10\7\1\220\15\7\21\0\13\7\6\0\6\7"+
    "\1\0\2\7\6\0\12\7\1\221\13\7\21\0\13\7"+
    "\6\0\6\7\1\0\2\7\6\0\17\7\1\222\6\7"+
    "\21\0\13\7\6\0\6\7\1\0\2\7\6\0\4\7"+
    "\1\223\21\7\21\0\13\7\6\0\6\7\1\0\2\7"+
    "\6\0\3\7\1\224\22\7\21\0\13\7\6\0\6\7"+
    "\1\0\2\7\6\0\17\7\1\225\6\7\21\0\13\7"+
    "\6\0\6\7\1\0\2\7\6\0\13\7\1\226\12\7"+
    "\21\0\13\7\6\0\6\7\1\0\2\7\6\0\26\7"+
    "\21\0\2\7\1\227\10\7\6\0\6\7\1\0\2\7"+
    "\6\0\26\7\21\0\7\7\1\230\3\7\6\0\6\7"+
    "\1\0\2\7\6\0\26\7\21\0\12\7\1\231\2\165"+
    "\1\0\104\165\2\166\1\0\104\166\3\167\1\232\1\167"+
    "\1\170\101\167\6\0\6\7\1\0\2\7\6\0\3\7"+
    "\1\233\22\7\21\0\13\7\6\0\6\7\1\0\2\7"+
    "\6\0\13\7\1\234\12\7\21\0\13\7\6\0\6\7"+
    "\1\0\2\7\6\0\1\235\25\7\21\0\13\7\6\0"+
    "\6\7\1\0\2\7\6\0\3\7\1\236\3\7\1\237"+
    "\16\7\21\0\13\7\6\0\6\7\1\0\2\7\6\0"+
    "\7\7\1\240\16\7\21\0\13\7\6\0\6\7\1\0"+
    "\2\7\6\0\7\7\1\241\16\7\21\0\13\7\6\0"+
    "\6\7\1\0\2\7\6\0\3\7\1\242\22\7\21\0"+
    "\13\7\6\0\6\7\1\0\2\7\6\0\1\243\25\7"+
    "\21\0\13\7\6\0\6\7\1\0\2\7\6\0\2\7"+
    "\1\244\23\7\21\0\13\7\6\0\6\7\1\0\2\7"+
    "\6\0\6\7\1\245\17\7\21\0\13\7\6\0\6\7"+
    "\1\0\2\7\6\0\10\7\1\246\15\7\21\0\13\7"+
    "\6\0\6\7\1\0\2\7\6\0\1\7\1\247\24\7"+
    "\21\0\13\7\6\0\6\7\1\0\2\7\6\0\13\7"+
    "\1\250\12\7\21\0\13\7\6\0\6\7\1\0\2\7"+
    "\6\0\11\7\1\251\14\7\21\0\13\7\6\0\6\7"+
    "\1\0\2\7\6\0\7\7\1\252\16\7\21\0\13\7"+
    "\6\0\6\7\1\0\2\7\6\0\5\7\1\253\20\7"+
    "\21\0\13\7\6\0\6\7\1\0\2\7\6\0\13\7"+
    "\1\254\12\7\21\0\13\7\6\0\6\7\1\0\2\7"+
    "\6\0\16\7\1\255\7\7\21\0\13\7\6\0\6\7"+
    "\1\0\2\7\6\0\13\7\1\256\12\7\21\0\13\7"+
    "\6\0\6\7\1\0\2\7\6\0\1\7\1\257\24\7"+
    "\21\0\13\7\6\0\6\7\1\0\2\7\6\0\5\7"+
    "\1\260\20\7\21\0\13\7\6\0\6\7\1\0\2\7"+
    "\6\0\2\7\1\261\23\7\21\0\13\7\6\0\6\7"+
    "\1\0\2\7\6\0\17\7\1\262\6\7\21\0\13\7"+
    "\6\0\6\7\1\0\2\7\6\0\2\7\1\263\23\7"+
    "\21\0\13\7\6\0\6\7\1\0\2\7\6\0\26\7"+
    "\21\0\3\7\1\264\7\7\6\0\6\7\1\0\1\7"+
    "\1\265\6\0\26\7\21\0\13\7\6\0\6\7\1\0"+
    "\2\7\6\0\26\7\21\0\3\7\1\266\7\7\6\0"+
    "\6\7\1\0\2\7\6\0\3\7\1\267\22\7\21\0"+
    "\13\7\6\0\6\7\1\0\2\7\6\0\22\7\1\270"+
    "\3\7\21\0\13\7\6\0\6\7\1\0\2\7\6\0"+
    "\7\7\1\271\16\7\21\0\13\7\6\0\6\7\1\0"+
    "\2\7\6\0\10\7\1\272\15\7\21\0\13\7\6\0"+
    "\6\7\1\0\2\7\6\0\10\7\1\273\15\7\21\0"+
    "\13\7\6\0\6\7\1\0\2\7\6\0\1\274\25\7"+
    "\21\0\13\7\6\0\6\7\1\0\2\7\6\0\13\7"+
    "\1\275\12\7\21\0\13\7\6\0\6\7\1\0\2\7"+
    "\6\0\7\7\1\276\16\7\21\0\13\7\6\0\6\7"+
    "\1\0\2\7\6\0\1\7\1\277\24\7\21\0\13\7"+
    "\6\0\6\7\1\0\2\7\6\0\20\7\1\300\5\7"+
    "\21\0\13\7\6\0\6\7\1\0\2\7\6\0\15\7"+
    "\1\301\10\7\21\0\13\7\6\0\6\7\1\0\2\7"+
    "\6\0\14\7\1\302\11\7\21\0\13\7\6\0\6\7"+
    "\1\0\2\7\6\0\2\7\1\303\23\7\21\0\13\7"+
    "\6\0\6\7\1\0\2\7\6\0\12\7\1\304\13\7"+
    "\21\0\13\7\6\0\6\7\1\0\2\7\6\0\6\7"+
    "\1\305\17\7\21\0\13\7\6\0\6\7\1\0\2\7"+
    "\6\0\13\7\1\306\12\7\21\0\13\7\6\0\6\7"+
    "\1\0\2\7\6\0\1\7\1\307\24\7\21\0\13\7"+
    "\6\0\6\7\1\0\2\7\6\0\5\7\1\310\20\7"+
    "\21\0\13\7\6\0\6\7\1\0\2\7\6\0\13\7"+
    "\1\311\12\7\21\0\13\7\6\0\6\7\1\0\2\7"+
    "\6\0\24\7\1\312\1\7\21\0\13\7\6\0\6\7"+
    "\1\0\2\7\6\0\26\7\21\0\4\7\1\313\6\7"+
    "\6\0\6\7\1\0\2\7\6\0\26\7\21\0\2\7"+
    "\1\314\10\7\6\0\6\7\1\0\2\7\6\0\6\7"+
    "\1\315\17\7\21\0\13\7\6\0\6\7\1\0\2\7"+
    "\6\0\1\316\25\7\21\0\13\7\6\0\6\7\1\0"+
    "\2\7\6\0\22\7\1\317\3\7\21\0\13\7\6\0"+
    "\6\7\1\0\2\7\6\0\10\7\1\320\15\7\21\0"+
    "\13\7\6\0\6\7\1\0\2\7\6\0\1\7\1\321"+
    "\24\7\21\0\13\7\6\0\6\7\1\0\2\7\6\0"+
    "\13\7\1\322\12\7\21\0\13\7\6\0\6\7\1\0"+
    "\2\7\6\0\6\7\1\323\17\7\21\0\13\7\6\0"+
    "\6\7\1\0\2\7\6\0\6\7\1\324\17\7\21\0"+
    "\13\7\6\0\6\7\1\0\2\7\6\0\17\7\1\325"+
    "\6\7\21\0\13\7\6\0\6\7\1\0\2\7\6\0"+
    "\13\7\1\326\12\7\21\0\13\7\6\0\6\7\1\0"+
    "\2\7\6\0\1\7\1\327\24\7\21\0\13\7\6\0"+
    "\6\7\1\0\2\7\6\0\6\7\1\330\17\7\21\0"+
    "\13\7\6\0\6\7\1\0\2\7\6\0\5\7\1\331"+
    "\20\7\21\0\13\7\6\0\6\7\1\0\2\7\6\0"+
    "\11\7\1\332\14\7\21\0\13\7\6\0\6\7\1\0"+
    "\2\7\6\0\25\7\1\333\21\0\13\7\6\0\6\7"+
    "\1\0\2\7\6\0\1\334\25\7\21\0\13\7\6\0"+
    "\6\7\1\0\2\7\6\0\3\7\1\335\22\7\21\0"+
    "\13\7\6\0\6\7\1\0\2\7\6\0\7\7\1\336"+
    "\16\7\21\0\13\7\6\0\6\7\1\0\2\7\6\0"+
    "\13\7\1\337\12\7\21\0\13\7\6\0\6\7\1\0"+
    "\2\7\6\0\6\7\1\340\17\7\21\0\13\7\6\0"+
    "\6\7\1\0\2\7\6\0\13\7\1\341\12\7\21\0"+
    "\13\7\6\0\6\7\1\0\2\7\6\0\11\7\1\342"+
    "\14\7\21\0\13\7\6\0\6\7\1\0\2\7\6\0"+
    "\4\7\1\343\21\7\21\0\13\7";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10650];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\12\1\3\11\21\1\7\11\1\1\2\11"+
    "\5\1\2\11\3\1\1\0\1\1\5\11\1\0\2\11"+
    "\2\1\1\0\1\11\3\0\1\11\40\1\13\11\6\1"+
    "\1\0\41\1\1\11\111\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[227];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public _MonkeyLexer() {
    this(null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _MonkeyLexer(java.io.Reader in) {
    zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 180) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 7: 
          { return IDENTIFIER;
          }
        case 94: break;
        case 59: 
          { return BLOCK_COMMENT;
          }
        case 95: break;
        case 63: 
          { return TRY;
          }
        case 96: break;
        case 19: 
          { return LPAREN;
          }
        case 97: break;
        case 60: 
          { return AND;
          }
        case 98: break;
        case 78: 
          { return WHILE;
          }
        case 99: break;
        case 54: 
          { return SUBEQ;
          }
        case 100: break;
        case 74: 
          { return CONST;
          }
        case 101: break;
        case 68: 
          { return TRUE;
          }
        case 102: break;
        case 18: 
          { return RBRACKET;
          }
        case 103: break;
        case 29: 
          { return PERCENT;
          }
        case 104: break;
        case 82: 
          { return STATIC;
          }
        case 105: break;
        case 50: 
          { return AMPEQ;
          }
        case 106: break;
        case 14: 
          { return COLON;
          }
        case 107: break;
        case 11: 
          { return STRING_B;
          }
        case 108: break;
        case 26: 
          { return AMP;
          }
        case 109: break;
        case 79: 
          { return BREAK;
          }
        case 110: break;
        case 25: 
          { return EQ;
          }
        case 111: break;
        case 58: 
          { return SINGLE_LINE_DOC_COMMENT;
          }
        case 112: break;
        case 71: 
          { return VOID;
          }
        case 113: break;
        case 38: 
          { return DOUBLELITERAL;
          }
        case 114: break;
        case 65: 
          { return HAS;
          }
        case 115: break;
        case 22: 
          { return BAR;
          }
        case 116: break;
        case 89: 
          { return EXTENDS;
          }
        case 117: break;
        case 34: 
          { return BANGEQ;
          }
        case 118: break;
        case 53: 
          { return PLUSPLUS;
          }
        case 119: break;
        case 30: 
          { return CARET;
          }
        case 120: break;
        case 85: 
          { return RETURN;
          }
        case 121: break;
        case 81: 
          { return SUPER;
          }
        case 122: break;
        case 3: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 123: break;
        case 76: 
          { return USING;
          }
        case 124: break;
        case 10: 
          { return STRING_A;
          }
        case 125: break;
        case 17: 
          { return LBRACKET;
          }
        case 126: break;
        case 46: 
          { return BARBAR;
          }
        case 127: break;
        case 73: 
          { return CATCH;
          }
        case 128: break;
        case 21: 
          { return COMMA;
          }
        case 129: break;
        case 37: 
          { return LONGLITERAL;
          }
        case 130: break;
        case 86: 
          { return MODULE;
          }
        case 131: break;
        case 27: 
          { return PLUS;
          }
        case 132: break;
        case 84: 
          { return NATIVE;
          }
        case 133: break;
        case 52: 
          { return PLUSEQ;
          }
        case 134: break;
        case 49: 
          { return EQEQ;
          }
        case 135: break;
        case 67: 
          { return NULL;
          }
        case 136: break;
        case 23: 
          { return LT;
          }
        case 137: break;
        case 83: 
          { return SWITCH;
          }
        case 138: break;
        case 33: 
          { return SLASHEQ;
          }
        case 139: break;
        case 72: 
          { return CLASS;
          }
        case 140: break;
        case 70: 
          { return ENUM;
          }
        case 141: break;
        case 9: 
          { return DOT;
          }
        case 142: break;
        case 32: 
          { return MULTI_LINE_COMMENT_START;
          }
        case 143: break;
        case 90: 
          { return DEFAULT;
          }
        case 144: break;
        case 45: 
          { return DO;
          }
        case 145: break;
        case 47: 
          { return CARETEQ;
          }
        case 146: break;
        case 8: 
          { return INTLITERAL;
          }
        case 147: break;
        case 12: 
          { return SEMI;
          }
        case 148: break;
        case 75: 
          { return FALSE;
          }
        case 149: break;
        case 16: 
          { return RBRACE;
          }
        case 150: break;
        case 80: 
          { return BAREQ;
          }
        case 151: break;
        case 62: 
          { return NEW;
          }
        case 152: break;
        case 24: 
          { return GT;
          }
        case 153: break;
        case 41: 
          { return CHARLITERAL;
          }
        case 154: break;
        case 51: 
          { return AMPAMP;
          }
        case 155: break;
        case 28: 
          { return SUB;
          }
        case 156: break;
        case 35: 
          { return MULTI_LINE_COMMENT_END;
          }
        case 157: break;
        case 87: 
          { return HIDDEN;
          }
        case 158: break;
        case 56: 
          { return PERCENTEQ;
          }
        case 159: break;
        case 91: 
          { return CONTINUE;
          }
        case 160: break;
        case 44: 
          { return OR;
          }
        case 161: break;
        case 15: 
          { return LBRACE;
          }
        case 162: break;
        case 31: 
          { return TILDE;
          }
        case 163: break;
        case 64: 
          { return VAR;
          }
        case 164: break;
        case 92: 
          { return FUNCTION;
          }
        case 165: break;
        case 4: 
          { return SLASH;
          }
        case 166: break;
        case 77: 
          { return THROW;
          }
        case 167: break;
        case 69: 
          { return ELSE;
          }
        case 168: break;
        case 40: 
          { return STRING;
          }
        case 169: break;
        case 43: 
          { return IF;
          }
        case 170: break;
        case 6: 
          { return STAR;
          }
        case 171: break;
        case 93: 
          { return INSTANCEOF;
          }
        case 172: break;
        case 55: 
          { return SUBSUB;
          }
        case 173: break;
        case 57: 
          { return SINGLE_LINE_COMMENT;
          }
        case 174: break;
        case 88: 
          { return FINALLY;
          }
        case 175: break;
        case 2: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 176: break;
        case 1: 
          { return FLOATLITERAL;
          }
        case 177: break;
        case 61: 
          { return FOR;
          }
        case 178: break;
        case 48: 
          { return EQGT;
          }
        case 179: break;
        case 66: 
          { return CASE;
          }
        case 180: break;
        case 20: 
          { return RPAREN;
          }
        case 181: break;
        case 36: 
          { return STAREQ;
          }
        case 182: break;
        case 5: 
          { return BANG;
          }
        case 183: break;
        case 13: 
          { return QUES;
          }
        case 184: break;
        case 42: 
          { return AS;
          }
        case 185: break;
        case 39: 
          { return HEX_LITERAL;
          }
        case 186: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
