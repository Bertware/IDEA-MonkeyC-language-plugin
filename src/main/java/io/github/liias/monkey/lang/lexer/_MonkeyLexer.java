/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package io.github.liias.monkey.lang.lexer;

import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static io.github.liias.monkey.lang.psi.MonkeyTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>_MonkeyLexer.flex</tt>
 */
public class _MonkeyLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\4\2\22\0\1\3\1\5\1\20\1\0\1\7\1\72\1\67\1\22\1\60\1\61\1\6\1\70"+
    "\1\62\1\71\1\15\1\4\1\12\11\10\1\25\1\23\1\64\1\66\1\65\1\24\1\0\1\76\1\75"+
    "\1\14\1\17\1\100\1\16\2\7\1\104\2\7\1\11\2\7\1\103\1\107\1\101\1\77\1\105"+
    "\1\7\1\106\1\102\1\7\1\13\2\7\1\56\1\21\1\57\1\73\1\7\1\0\1\30\1\51\1\26\1"+
    "\45\1\41\1\32\1\46\1\50\1\36\1\7\1\52\1\27\1\44\1\34\1\37\2\7\1\40\1\31\1"+
    "\35\1\33\1\43\1\42\1\47\1\53\1\7\1\54\1\63\1\55\1\74\6\0\1\1\242\0\2\1\26"+
    "\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\2\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\21\6\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\3\6\1\0\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\0\1\45\1\46\1\47\1\45\1\0\1\50\3\0"+
    "\1\51\3\6\1\52\15\6\1\53\1\6\1\54\7\6"+
    "\1\55\4\6\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\1\70\3\6\1\71\1\72"+
    "\1\73\1\0\4\6\1\74\5\6\1\75\3\6\1\76"+
    "\1\6\1\77\7\6\1\100\2\6\1\101\5\6\1\73"+
    "\1\6\1\102\12\6\1\103\1\104\3\6\1\105\1\106"+
    "\7\6\1\107\1\6\1\110\1\111\1\112\3\6\1\113"+
    "\2\6\1\114\1\6\1\115\3\6\1\116\3\6\1\117"+
    "\1\120\1\121\1\6\1\122\1\123\2\6\1\124\1\6"+
    "\1\125\1\6\1\126\1\6\1\127\2\6\1\130\1\6"+
    "\1\131\1\132\1\133\1\134\2\6\1\135";

  private static int [] zzUnpackAction() {
    int [] result = new int[227];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\110\0\220\0\330\0\u0120\0\u0168\0\u01b0\0\u01f8"+
    "\0\u0240\0\u0288\0\u02d0\0\u0318\0\110\0\110\0\110\0\u0360"+
    "\0\u03a8\0\u03f0\0\u0438\0\u0480\0\u04c8\0\u0510\0\u0558\0\u05a0"+
    "\0\u05e8\0\u0630\0\u0678\0\u06c0\0\u0708\0\u0750\0\u0798\0\u07e0"+
    "\0\110\0\110\0\110\0\110\0\110\0\110\0\110\0\u0828"+
    "\0\110\0\110\0\u0870\0\u08b8\0\u0900\0\u0948\0\u0990\0\110"+
    "\0\110\0\u09d8\0\u0a20\0\u0a68\0\u0ab0\0\u0af8\0\110\0\110"+
    "\0\110\0\110\0\110\0\u0288\0\110\0\110\0\u0b40\0\u0b88"+
    "\0\u02d0\0\110\0\u0bd0\0\u0318\0\u0c18\0\110\0\u0c60\0\u0ca8"+
    "\0\u0cf0\0\u01b0\0\u0d38\0\u0d80\0\u0dc8\0\u0e10\0\u0e58\0\u0ea0"+
    "\0\u0ee8\0\u0f30\0\u0f78\0\u0fc0\0\u1008\0\u1050\0\u1098\0\u01b0"+
    "\0\u10e0\0\u01b0\0\u1128\0\u1170\0\u11b8\0\u1200\0\u1248\0\u1290"+
    "\0\u12d8\0\u01b0\0\u1320\0\u1368\0\u13b0\0\u13f8\0\110\0\110"+
    "\0\110\0\110\0\110\0\110\0\110\0\110\0\110\0\110"+
    "\0\110\0\u1440\0\u1488\0\u14d0\0\u1518\0\u1560\0\u0af8\0\u15a8"+
    "\0\u15f0\0\u1638\0\u1680\0\u16c8\0\u01b0\0\u1710\0\u1758\0\u17a0"+
    "\0\u17e8\0\u1830\0\u01b0\0\u1878\0\u18c0\0\u1908\0\u01b0\0\u1950"+
    "\0\u01b0\0\u1998\0\u19e0\0\u1a28\0\u1a70\0\u1ab8\0\u1b00\0\u1b48"+
    "\0\u01b0\0\u1b90\0\u1bd8\0\u01b0\0\u1c20\0\u1c68\0\u1cb0\0\u1cf8"+
    "\0\u1d40\0\110\0\u1d88\0\u01b0\0\u1dd0\0\u1e18\0\u1e60\0\u1ea8"+
    "\0\u1ef0\0\u1f38\0\u1f80\0\u1fc8\0\u2010\0\u2058\0\u01b0\0\u01b0"+
    "\0\u20a0\0\u20e8\0\u2130\0\u01b0\0\u01b0\0\u2178\0\u21c0\0\u2208"+
    "\0\u2250\0\u2298\0\u22e0\0\u2328\0\u01b0\0\u2370\0\u01b0\0\u01b0"+
    "\0\u01b0\0\u23b8\0\u2400\0\u2448\0\u01b0\0\u2490\0\u24d8\0\u01b0"+
    "\0\u2520\0\u01b0\0\u2568\0\u25b0\0\u25f8\0\u01b0\0\u2640\0\u2688"+
    "\0\u26d0\0\u01b0\0\u01b0\0\u01b0\0\u2718\0\u01b0\0\u01b0\0\u2760"+
    "\0\u27a8\0\u01b0\0\u27f0\0\u01b0\0\u2838\0\u01b0\0\u2880\0\u01b0"+
    "\0\u28c8\0\u2910\0\u01b0\0\u2958\0\u01b0\0\u01b0\0\u01b0\0\u01b0"+
    "\0\u29a0\0\u29e8\0\u01b0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[227];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\2\3\1\4\1\5\1\6\1\7\1\10\1\7"+
    "\1\11\2\7\1\12\2\7\1\13\1\2\1\14\1\15"+
    "\1\16\1\17\1\20\1\7\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\2\7\1\37\1\40\2\7\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\4\7\1\63\2\7\1\64\2\7\112\0\2\3\110\0"+
    "\1\65\1\0\1\66\57\0\1\67\107\0\1\70\25\0"+
    "\1\71\61\0\1\72\30\0\6\7\1\0\2\7\6\0"+
    "\26\7\21\0\13\7\10\0\1\10\1\73\1\10\2\0"+
    "\1\74\1\75\1\76\7\0\1\73\2\0\1\75\12\0"+
    "\1\76\52\0\1\10\1\73\1\10\1\77\1\0\1\74"+
    "\1\75\1\76\7\0\1\73\2\0\1\75\12\0\1\76"+
    "\1\0\1\77\50\0\1\100\1\0\1\100\75\0\20\101"+
    "\1\102\1\103\66\101\21\104\1\105\1\106\65\104\7\0"+
    "\6\7\1\0\2\7\6\0\1\7\1\107\1\110\6\7"+
    "\1\111\14\7\21\0\13\7\7\0\6\7\1\0\2\7"+
    "\6\0\3\7\1\112\2\7\1\113\17\7\21\0\13\7"+
    "\7\0\6\7\1\0\2\7\6\0\7\7\1\114\4\7"+
    "\1\115\11\7\21\0\13\7\7\0\6\7\1\0\2\7"+
    "\6\0\2\7\1\116\2\7\1\117\2\7\1\120\1\121"+
    "\14\7\21\0\13\7\7\0\6\7\1\0\2\7\6\0"+
    "\3\7\1\122\22\7\21\0\13\7\7\0\6\7\1\0"+
    "\2\7\6\0\2\7\1\123\2\7\1\124\5\7\1\125"+
    "\12\7\21\0\13\7\7\0\6\7\1\0\2\7\6\0"+
    "\12\7\1\126\7\7\1\127\3\7\21\0\13\7\7\0"+
    "\6\7\1\0\2\7\6\0\4\7\1\130\1\7\1\131"+
    "\17\7\21\0\13\7\7\0\6\7\1\0\2\7\6\0"+
    "\12\7\1\132\13\7\21\0\13\7\7\0\6\7\1\0"+
    "\2\7\6\0\13\7\1\133\12\7\21\0\13\7\7\0"+
    "\6\7\1\0\2\7\6\0\1\7\1\134\4\7\1\135"+
    "\12\7\1\136\4\7\21\0\13\7\7\0\6\7\1\0"+
    "\2\7\6\0\22\7\1\137\3\7\21\0\13\7\7\0"+
    "\6\7\1\0\2\7\6\0\2\7\1\140\23\7\21\0"+
    "\13\7\7\0\6\7\1\0\2\7\6\0\11\7\1\141"+
    "\14\7\21\0\13\7\7\0\6\7\1\0\2\7\6\0"+
    "\11\7\1\142\1\7\1\143\12\7\21\0\13\7\7\0"+
    "\6\7\1\0\2\7\6\0\2\7\1\144\5\7\1\145"+
    "\15\7\21\0\13\7\7\0\6\7\1\0\2\7\6\0"+
    "\12\7\1\146\13\7\21\0\13\7\63\0\1\147\2\0"+
    "\1\150\106\0\1\151\1\152\107\0\1\153\1\154\106\0"+
    "\1\155\1\0\1\156\105\0\1\157\2\0\1\160\104\0"+
    "\1\161\30\0\6\7\1\0\2\7\6\0\26\7\21\0"+
    "\1\7\1\162\11\7\7\0\6\7\1\0\2\7\6\0"+
    "\26\7\21\0\6\7\1\163\4\7\7\0\6\7\1\0"+
    "\2\7\6\0\26\7\21\0\11\7\1\164\1\7\5\165"+
    "\1\166\102\165\6\167\1\170\101\167\10\0\1\77\1\0"+
    "\1\77\1\0\1\77\1\0\2\77\6\0\1\77\1\0"+
    "\1\77\1\0\1\77\6\0\1\77\3\0\1\77\3\0"+
    "\1\77\23\0\2\77\1\0\1\77\17\0\1\100\1\0"+
    "\1\100\3\0\1\75\1\76\12\0\1\75\12\0\1\76"+
    "\42\0\1\101\2\0\105\101\1\104\2\0\105\104\7\0"+
    "\6\7\1\0\2\7\6\0\2\7\1\171\23\7\21\0"+
    "\13\7\7\0\6\7\1\0\2\7\6\0\3\7\1\172"+
    "\3\7\1\173\16\7\21\0\13\7\7\0\6\7\1\0"+
    "\2\7\6\0\6\7\1\174\17\7\21\0\13\7\7\0"+
    "\6\7\1\0\2\7\6\0\17\7\1\175\6\7\21\0"+
    "\13\7\7\0\6\7\1\0\2\7\6\0\2\7\1\176"+
    "\23\7\21\0\13\7\7\0\6\7\1\0\2\7\6\0"+
    "\10\7\1\177\15\7\21\0\13\7\7\0\6\7\1\0"+
    "\2\7\6\0\1\7\1\200\24\7\21\0\13\7\7\0"+
    "\6\7\1\0\2\7\6\0\6\7\1\201\17\7\21\0"+
    "\13\7\7\0\6\7\1\0\2\7\6\0\6\7\1\202"+
    "\17\7\21\0\13\7\7\0\6\7\1\0\2\7\6\0"+
    "\12\7\1\203\13\7\21\0\13\7\7\0\6\7\1\0"+
    "\2\7\6\0\10\7\1\204\15\7\21\0\13\7\7\0"+
    "\6\7\1\0\2\7\6\0\7\7\1\205\16\7\21\0"+
    "\13\7\7\0\6\7\1\0\2\7\6\0\1\7\1\206"+
    "\24\7\21\0\13\7\7\0\6\7\1\0\2\7\6\0"+
    "\14\7\1\207\11\7\21\0\13\7\7\0\6\7\1\0"+
    "\2\7\6\0\5\7\1\210\17\7\1\211\21\0\13\7"+
    "\7\0\6\7\1\0\2\7\6\0\12\7\1\212\13\7"+
    "\21\0\13\7\7\0\6\7\1\0\2\7\6\0\3\7"+
    "\1\213\22\7\21\0\13\7\7\0\6\7\1\0\2\7"+
    "\6\0\7\7\1\214\16\7\21\0\13\7\7\0\6\7"+
    "\1\0\2\7\6\0\3\7\1\215\22\7\21\0\13\7"+
    "\7\0\6\7\1\0\2\7\6\0\5\7\1\216\20\7"+
    "\21\0\13\7\7\0\6\7\1\0\2\7\6\0\7\7"+
    "\1\217\16\7\21\0\13\7\7\0\6\7\1\0\2\7"+
    "\6\0\10\7\1\220\15\7\21\0\13\7\7\0\6\7"+
    "\1\0\2\7\6\0\12\7\1\221\13\7\21\0\13\7"+
    "\7\0\6\7\1\0\2\7\6\0\17\7\1\222\6\7"+
    "\21\0\13\7\7\0\6\7\1\0\2\7\6\0\4\7"+
    "\1\223\21\7\21\0\13\7\7\0\6\7\1\0\2\7"+
    "\6\0\3\7\1\224\22\7\21\0\13\7\7\0\6\7"+
    "\1\0\2\7\6\0\17\7\1\225\6\7\21\0\13\7"+
    "\7\0\6\7\1\0\2\7\6\0\13\7\1\226\12\7"+
    "\21\0\13\7\7\0\6\7\1\0\2\7\6\0\26\7"+
    "\21\0\2\7\1\227\10\7\7\0\6\7\1\0\2\7"+
    "\6\0\26\7\21\0\7\7\1\230\3\7\7\0\6\7"+
    "\1\0\2\7\6\0\26\7\21\0\12\7\1\231\1\165"+
    "\2\0\105\165\1\166\2\0\105\166\4\167\1\232\1\167"+
    "\1\170\101\167\7\0\6\7\1\0\2\7\6\0\3\7"+
    "\1\233\22\7\21\0\13\7\7\0\6\7\1\0\2\7"+
    "\6\0\13\7\1\234\12\7\21\0\13\7\7\0\6\7"+
    "\1\0\2\7\6\0\1\235\25\7\21\0\13\7\7\0"+
    "\6\7\1\0\2\7\6\0\3\7\1\236\3\7\1\237"+
    "\16\7\21\0\13\7\7\0\6\7\1\0\2\7\6\0"+
    "\7\7\1\240\16\7\21\0\13\7\7\0\6\7\1\0"+
    "\2\7\6\0\7\7\1\241\16\7\21\0\13\7\7\0"+
    "\6\7\1\0\2\7\6\0\3\7\1\242\22\7\21\0"+
    "\13\7\7\0\6\7\1\0\2\7\6\0\1\243\25\7"+
    "\21\0\13\7\7\0\6\7\1\0\2\7\6\0\2\7"+
    "\1\244\23\7\21\0\13\7\7\0\6\7\1\0\2\7"+
    "\6\0\6\7\1\245\17\7\21\0\13\7\7\0\6\7"+
    "\1\0\2\7\6\0\10\7\1\246\15\7\21\0\13\7"+
    "\7\0\6\7\1\0\2\7\6\0\1\7\1\247\24\7"+
    "\21\0\13\7\7\0\6\7\1\0\2\7\6\0\13\7"+
    "\1\250\12\7\21\0\13\7\7\0\6\7\1\0\2\7"+
    "\6\0\11\7\1\251\14\7\21\0\13\7\7\0\6\7"+
    "\1\0\2\7\6\0\7\7\1\252\16\7\21\0\13\7"+
    "\7\0\6\7\1\0\2\7\6\0\5\7\1\253\20\7"+
    "\21\0\13\7\7\0\6\7\1\0\2\7\6\0\13\7"+
    "\1\254\12\7\21\0\13\7\7\0\6\7\1\0\2\7"+
    "\6\0\16\7\1\255\7\7\21\0\13\7\7\0\6\7"+
    "\1\0\2\7\6\0\13\7\1\256\12\7\21\0\13\7"+
    "\7\0\6\7\1\0\2\7\6\0\1\7\1\257\24\7"+
    "\21\0\13\7\7\0\6\7\1\0\2\7\6\0\5\7"+
    "\1\260\20\7\21\0\13\7\7\0\6\7\1\0\2\7"+
    "\6\0\2\7\1\261\23\7\21\0\13\7\7\0\6\7"+
    "\1\0\2\7\6\0\17\7\1\262\6\7\21\0\13\7"+
    "\7\0\6\7\1\0\2\7\6\0\2\7\1\263\23\7"+
    "\21\0\13\7\7\0\6\7\1\0\2\7\6\0\26\7"+
    "\21\0\3\7\1\264\7\7\7\0\6\7\1\0\1\7"+
    "\1\265\6\0\26\7\21\0\13\7\7\0\6\7\1\0"+
    "\2\7\6\0\26\7\21\0\3\7\1\266\7\7\7\0"+
    "\6\7\1\0\2\7\6\0\3\7\1\267\22\7\21\0"+
    "\13\7\7\0\6\7\1\0\2\7\6\0\22\7\1\270"+
    "\3\7\21\0\13\7\7\0\6\7\1\0\2\7\6\0"+
    "\7\7\1\271\16\7\21\0\13\7\7\0\6\7\1\0"+
    "\2\7\6\0\10\7\1\272\15\7\21\0\13\7\7\0"+
    "\6\7\1\0\2\7\6\0\10\7\1\273\15\7\21\0"+
    "\13\7\7\0\6\7\1\0\2\7\6\0\1\274\25\7"+
    "\21\0\13\7\7\0\6\7\1\0\2\7\6\0\13\7"+
    "\1\275\12\7\21\0\13\7\7\0\6\7\1\0\2\7"+
    "\6\0\7\7\1\276\16\7\21\0\13\7\7\0\6\7"+
    "\1\0\2\7\6\0\1\7\1\277\24\7\21\0\13\7"+
    "\7\0\6\7\1\0\2\7\6\0\20\7\1\300\5\7"+
    "\21\0\13\7\7\0\6\7\1\0\2\7\6\0\15\7"+
    "\1\301\10\7\21\0\13\7\7\0\6\7\1\0\2\7"+
    "\6\0\14\7\1\302\11\7\21\0\13\7\7\0\6\7"+
    "\1\0\2\7\6\0\2\7\1\303\23\7\21\0\13\7"+
    "\7\0\6\7\1\0\2\7\6\0\12\7\1\304\13\7"+
    "\21\0\13\7\7\0\6\7\1\0\2\7\6\0\6\7"+
    "\1\305\17\7\21\0\13\7\7\0\6\7\1\0\2\7"+
    "\6\0\13\7\1\306\12\7\21\0\13\7\7\0\6\7"+
    "\1\0\2\7\6\0\1\7\1\307\24\7\21\0\13\7"+
    "\7\0\6\7\1\0\2\7\6\0\5\7\1\310\20\7"+
    "\21\0\13\7\7\0\6\7\1\0\2\7\6\0\13\7"+
    "\1\311\12\7\21\0\13\7\7\0\6\7\1\0\2\7"+
    "\6\0\24\7\1\312\1\7\21\0\13\7\7\0\6\7"+
    "\1\0\2\7\6\0\26\7\21\0\4\7\1\313\6\7"+
    "\7\0\6\7\1\0\2\7\6\0\26\7\21\0\2\7"+
    "\1\314\10\7\7\0\6\7\1\0\2\7\6\0\6\7"+
    "\1\315\17\7\21\0\13\7\7\0\6\7\1\0\2\7"+
    "\6\0\1\316\25\7\21\0\13\7\7\0\6\7\1\0"+
    "\2\7\6\0\22\7\1\317\3\7\21\0\13\7\7\0"+
    "\6\7\1\0\2\7\6\0\10\7\1\320\15\7\21\0"+
    "\13\7\7\0\6\7\1\0\2\7\6\0\1\7\1\321"+
    "\24\7\21\0\13\7\7\0\6\7\1\0\2\7\6\0"+
    "\13\7\1\322\12\7\21\0\13\7\7\0\6\7\1\0"+
    "\2\7\6\0\6\7\1\323\17\7\21\0\13\7\7\0"+
    "\6\7\1\0\2\7\6\0\6\7\1\324\17\7\21\0"+
    "\13\7\7\0\6\7\1\0\2\7\6\0\17\7\1\325"+
    "\6\7\21\0\13\7\7\0\6\7\1\0\2\7\6\0"+
    "\13\7\1\326\12\7\21\0\13\7\7\0\6\7\1\0"+
    "\2\7\6\0\1\7\1\327\24\7\21\0\13\7\7\0"+
    "\6\7\1\0\2\7\6\0\6\7\1\330\17\7\21\0"+
    "\13\7\7\0\6\7\1\0\2\7\6\0\5\7\1\331"+
    "\20\7\21\0\13\7\7\0\6\7\1\0\2\7\6\0"+
    "\11\7\1\332\14\7\21\0\13\7\7\0\6\7\1\0"+
    "\2\7\6\0\25\7\1\333\21\0\13\7\7\0\6\7"+
    "\1\0\2\7\6\0\1\334\25\7\21\0\13\7\7\0"+
    "\6\7\1\0\2\7\6\0\3\7\1\335\22\7\21\0"+
    "\13\7\7\0\6\7\1\0\2\7\6\0\7\7\1\336"+
    "\16\7\21\0\13\7\7\0\6\7\1\0\2\7\6\0"+
    "\13\7\1\337\12\7\21\0\13\7\7\0\6\7\1\0"+
    "\2\7\6\0\6\7\1\340\17\7\21\0\13\7\7\0"+
    "\6\7\1\0\2\7\6\0\13\7\1\341\12\7\21\0"+
    "\13\7\7\0\6\7\1\0\2\7\6\0\11\7\1\342"+
    "\14\7\21\0\13\7\7\0\6\7\1\0\2\7\6\0"+
    "\4\7\1\343\21\7\21\0\13\7";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10800];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\12\1\3\11\21\1\7\11\1\1\2\11"+
    "\5\1\2\11\3\1\1\0\1\1\5\11\1\0\2\11"+
    "\2\1\1\0\1\11\3\0\1\11\40\1\13\11\6\1"+
    "\1\0\41\1\1\11\111\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[227];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _MonkeyLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _MonkeyLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            }
          case 94: break;
          case 2: 
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          case 95: break;
          case 3: 
            { return SLASH;
            }
          case 96: break;
          case 4: 
            { return BANG;
            }
          case 97: break;
          case 5: 
            { return STAR;
            }
          case 98: break;
          case 6: 
            { return IDENTIFIER;
            }
          case 99: break;
          case 7: 
            { return INTLITERAL;
            }
          case 100: break;
          case 8: 
            { return DOT;
            }
          case 101: break;
          case 9: 
            { return STRING_A;
            }
          case 102: break;
          case 10: 
            { return STRING_B;
            }
          case 103: break;
          case 11: 
            { return SEMI;
            }
          case 104: break;
          case 12: 
            { return QUES;
            }
          case 105: break;
          case 13: 
            { return COLON;
            }
          case 106: break;
          case 14: 
            { return LBRACE;
            }
          case 107: break;
          case 15: 
            { return RBRACE;
            }
          case 108: break;
          case 16: 
            { return LBRACKET;
            }
          case 109: break;
          case 17: 
            { return RBRACKET;
            }
          case 110: break;
          case 18: 
            { return LPAREN;
            }
          case 111: break;
          case 19: 
            { return RPAREN;
            }
          case 112: break;
          case 20: 
            { return COMMA;
            }
          case 113: break;
          case 21: 
            { return BAR;
            }
          case 114: break;
          case 22: 
            { return LT;
            }
          case 115: break;
          case 23: 
            { return GT;
            }
          case 116: break;
          case 24: 
            { return EQ;
            }
          case 117: break;
          case 25: 
            { return AMP;
            }
          case 118: break;
          case 26: 
            { return PLUS;
            }
          case 119: break;
          case 27: 
            { return SUB;
            }
          case 120: break;
          case 28: 
            { return PERCENT;
            }
          case 121: break;
          case 29: 
            { return CARET;
            }
          case 122: break;
          case 30: 
            { return TILDE;
            }
          case 123: break;
          case 31: 
            { return MULTI_LINE_COMMENT_START;
            }
          case 124: break;
          case 32: 
            { return SLASHEQ;
            }
          case 125: break;
          case 33: 
            { return BANGEQ;
            }
          case 126: break;
          case 34: 
            { return MULTI_LINE_COMMENT_END;
            }
          case 127: break;
          case 35: 
            { return STAREQ;
            }
          case 128: break;
          case 36: 
            { return LONGLITERAL;
            }
          case 129: break;
          case 37: 
            { return FLOATLITERAL;
            }
          case 130: break;
          case 38: 
            { return DOUBLELITERAL;
            }
          case 131: break;
          case 39: 
            { return HEX_LITERAL;
            }
          case 132: break;
          case 40: 
            { return STRING;
            }
          case 133: break;
          case 41: 
            { return CHARLITERAL;
            }
          case 134: break;
          case 42: 
            { return AS;
            }
          case 135: break;
          case 43: 
            { return IF;
            }
          case 136: break;
          case 44: 
            { return OR;
            }
          case 137: break;
          case 45: 
            { return DO;
            }
          case 138: break;
          case 46: 
            { return BARBAR;
            }
          case 139: break;
          case 47: 
            { return CARETEQ;
            }
          case 140: break;
          case 48: 
            { return EQGT;
            }
          case 141: break;
          case 49: 
            { return EQEQ;
            }
          case 142: break;
          case 50: 
            { return AMPEQ;
            }
          case 143: break;
          case 51: 
            { return AMPAMP;
            }
          case 144: break;
          case 52: 
            { return PLUSEQ;
            }
          case 145: break;
          case 53: 
            { return PLUSPLUS;
            }
          case 146: break;
          case 54: 
            { return SUBEQ;
            }
          case 147: break;
          case 55: 
            { return SUBSUB;
            }
          case 148: break;
          case 56: 
            { return PERCENTEQ;
            }
          case 149: break;
          case 57: 
            { return SINGLE_LINE_COMMENT;
            }
          case 150: break;
          case 58: 
            { return SINGLE_LINE_DOC_COMMENT;
            }
          case 151: break;
          case 59: 
            { return BLOCK_COMMENT;
            }
          case 152: break;
          case 60: 
            { return AND;
            }
          case 153: break;
          case 61: 
            { return FOR;
            }
          case 154: break;
          case 62: 
            { return NEW;
            }
          case 155: break;
          case 63: 
            { return TRY;
            }
          case 156: break;
          case 64: 
            { return VAR;
            }
          case 157: break;
          case 65: 
            { return HAS;
            }
          case 158: break;
          case 66: 
            { return CASE;
            }
          case 159: break;
          case 67: 
            { return NULL;
            }
          case 160: break;
          case 68: 
            { return TRUE;
            }
          case 161: break;
          case 69: 
            { return ELSE;
            }
          case 162: break;
          case 70: 
            { return ENUM;
            }
          case 163: break;
          case 71: 
            { return VOID;
            }
          case 164: break;
          case 72: 
            { return CLASS;
            }
          case 165: break;
          case 73: 
            { return CATCH;
            }
          case 166: break;
          case 74: 
            { return CONST;
            }
          case 167: break;
          case 75: 
            { return FALSE;
            }
          case 168: break;
          case 76: 
            { return USING;
            }
          case 169: break;
          case 77: 
            { return THROW;
            }
          case 170: break;
          case 78: 
            { return WHILE;
            }
          case 171: break;
          case 79: 
            { return BREAK;
            }
          case 172: break;
          case 80: 
            { return BAREQ;
            }
          case 173: break;
          case 81: 
            { return SUPER;
            }
          case 174: break;
          case 82: 
            { return STATIC;
            }
          case 175: break;
          case 83: 
            { return SWITCH;
            }
          case 176: break;
          case 84: 
            { return NATIVE;
            }
          case 177: break;
          case 85: 
            { return RETURN;
            }
          case 178: break;
          case 86: 
            { return MODULE;
            }
          case 179: break;
          case 87: 
            { return HIDDEN;
            }
          case 180: break;
          case 88: 
            { return FINALLY;
            }
          case 181: break;
          case 89: 
            { return EXTENDS;
            }
          case 182: break;
          case 90: 
            { return DEFAULT;
            }
          case 183: break;
          case 91: 
            { return CONTINUE;
            }
          case 184: break;
          case 92: 
            { return FUNCTION;
            }
          case 185: break;
          case 93: 
            { return INSTANCEOF;
            }
          case 186: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
