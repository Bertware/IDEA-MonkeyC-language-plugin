/* The following code was generated by JFlex 1.4.3 on 10.08.15 2:28 */

package ee.edio.garmin;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static ee.edio.garmin.psi.MonkeyCTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10.08.15 2:28 from the specification file
 * <tt>C:/Users/Madis/Projects/2015/MonkeyC/src/ee/edio/garmin/_MonkeyCLexer.flex</tt>
 */
public class _MonkeyCLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\2\1\1\1\1\1\1\22\0\1\1\1\62\1\10"+
    "\1\0\1\5\1\63\1\57\1\12\1\50\1\51\1\4\1\60\1\52"+
    "\1\61\1\7\1\3\12\6\1\15\1\13\1\54\1\56\1\55\1\14"+
    "\1\0\1\100\1\77\1\5\1\105\1\76\2\5\1\67\1\104\3\5"+
    "\1\102\1\5\1\71\1\75\1\101\1\70\1\73\1\66\1\74\1\103"+
    "\1\72\3\5\1\46\1\11\1\47\1\64\1\5\1\0\1\20\1\41"+
    "\1\16\1\35\1\31\1\22\1\36\1\40\1\26\1\5\1\42\1\17"+
    "\1\34\1\24\1\27\2\5\1\30\1\21\1\25\1\23\1\33\1\32"+
    "\1\37\1\43\1\5\1\44\1\53\1\45\1\65\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\21\5\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\1\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\5\5\1\36\1\37\1\40\1\41\1\42\1\43\1\0"+
    "\1\44\3\0\1\45\3\5\1\46\15\5\1\47\1\5"+
    "\1\50\7\5\1\51\4\5\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\5\5\1\66\1\0\4\5\1\67\5\5\1\70\3\5"+
    "\1\71\1\5\1\72\7\5\1\73\2\5\1\74\5\5"+
    "\1\75\1\5\1\66\1\5\1\76\12\5\1\77\1\100"+
    "\3\5\1\101\1\102\11\5\1\103\1\104\1\105\1\106"+
    "\3\5\1\107\2\5\1\110\1\5\1\111\3\5\1\112"+
    "\3\5\1\113\1\5\1\114\1\115\1\5\1\116\1\117"+
    "\2\5\1\120\1\5\1\121\1\5\1\122\1\5\1\123"+
    "\1\124\2\5\1\125\1\5\1\126\1\127\1\130\1\131"+
    "\2\5\1\132";

  private static int [] zzUnpackAction() {
    int [] result = new int[228];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\u0118\0\u015e\0\u01a4\0\106"+
    "\0\u01ea\0\u0230\0\106\0\106\0\106\0\u0276\0\u02bc\0\u0302"+
    "\0\u0348\0\u038e\0\u03d4\0\u041a\0\u0460\0\u04a6\0\u04ec\0\u0532"+
    "\0\u0578\0\u05be\0\u0604\0\u064a\0\u0690\0\u06d6\0\106\0\106"+
    "\0\106\0\106\0\106\0\106\0\106\0\u071c\0\106\0\106"+
    "\0\u0762\0\u07a8\0\u07ee\0\u0834\0\u087a\0\u08c0\0\106\0\106"+
    "\0\u0906\0\u094c\0\u0992\0\u09d8\0\u0a1e\0\u0a64\0\u0aaa\0\106"+
    "\0\106\0\106\0\u0af0\0\u01ea\0\106\0\u0b36\0\u0230\0\u0b7c"+
    "\0\106\0\u0bc2\0\u0c08\0\u0c4e\0\u015e\0\u0c94\0\u0cda\0\u0d20"+
    "\0\u0d66\0\u0dac\0\u0df2\0\u0e38\0\u0e7e\0\u0ec4\0\u0f0a\0\u0f50"+
    "\0\u0f96\0\u0fdc\0\u015e\0\u1022\0\u015e\0\u1068\0\u10ae\0\u10f4"+
    "\0\u113a\0\u1180\0\u11c6\0\u120c\0\u015e\0\u1252\0\u1298\0\u12de"+
    "\0\u1324\0\106\0\106\0\106\0\106\0\106\0\106\0\106"+
    "\0\106\0\106\0\106\0\106\0\106\0\u136a\0\u13b0\0\u13f6"+
    "\0\u143c\0\u1482\0\u0aaa\0\u14c8\0\u150e\0\u1554\0\u159a\0\u15e0"+
    "\0\u015e\0\u1626\0\u166c\0\u16b2\0\u16f8\0\u173e\0\u015e\0\u1784"+
    "\0\u17ca\0\u1810\0\u015e\0\u1856\0\u015e\0\u189c\0\u18e2\0\u1928"+
    "\0\u196e\0\u19b4\0\u19fa\0\u1a40\0\u015e\0\u1a86\0\u1acc\0\u015e"+
    "\0\u1b12\0\u1b58\0\u1b9e\0\u1be4\0\u1c2a\0\u015e\0\u1c70\0\106"+
    "\0\u1cb6\0\u015e\0\u1cfc\0\u1d42\0\u1d88\0\u1dce\0\u1e14\0\u1e5a"+
    "\0\u1ea0\0\u1ee6\0\u1f2c\0\u1f72\0\u015e\0\u015e\0\u1fb8\0\u1ffe"+
    "\0\u2044\0\u015e\0\u015e\0\u208a\0\u20d0\0\u2116\0\u215c\0\u21a2"+
    "\0\u21e8\0\u222e\0\u2274\0\u22ba\0\u015e\0\u015e\0\u015e\0\u015e"+
    "\0\u2300\0\u2346\0\u238c\0\u015e\0\u23d2\0\u2418\0\u015e\0\u245e"+
    "\0\u015e\0\u24a4\0\u24ea\0\u2530\0\u015e\0\u2576\0\u25bc\0\u2602"+
    "\0\u015e\0\u2648\0\u015e\0\u015e\0\u268e\0\u015e\0\u015e\0\u26d4"+
    "\0\u271a\0\u015e\0\u2760\0\u015e\0\u27a6\0\u015e\0\u27ec\0\u015e"+
    "\0\u015e\0\u2832\0\u2878\0\u015e\0\u28be\0\u015e\0\u015e\0\u015e"+
    "\0\u015e\0\u2904\0\u294a\0\u015e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[228];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\2\1\12\1\13\1\14\1\15\1\16\1\6\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\2\6\1\35\1\36"+
    "\2\6\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\4\6\1\62\3\6\1\63"+
    "\1\64\2\6\1\65\2\6\107\0\2\3\106\0\1\66"+
    "\1\67\51\0\1\70\32\0\1\71\52\0\1\72\34\0"+
    "\2\6\7\0\26\6\22\0\20\6\6\0\1\7\1\73"+
    "\76\0\10\74\1\75\1\76\74\74\11\77\1\100\1\101"+
    "\73\77\5\0\2\6\7\0\1\6\1\102\1\103\6\6"+
    "\1\104\14\6\22\0\20\6\5\0\2\6\7\0\3\6"+
    "\1\105\2\6\1\106\17\6\22\0\20\6\5\0\2\6"+
    "\7\0\7\6\1\107\4\6\1\110\11\6\22\0\20\6"+
    "\5\0\2\6\7\0\2\6\1\111\2\6\1\112\2\6"+
    "\1\113\1\114\14\6\22\0\20\6\5\0\2\6\7\0"+
    "\3\6\1\115\22\6\22\0\20\6\5\0\2\6\7\0"+
    "\2\6\1\116\2\6\1\117\5\6\1\120\12\6\22\0"+
    "\20\6\5\0\2\6\7\0\12\6\1\121\7\6\1\122"+
    "\3\6\22\0\20\6\5\0\2\6\7\0\4\6\1\123"+
    "\1\6\1\124\17\6\22\0\20\6\5\0\2\6\7\0"+
    "\12\6\1\125\13\6\22\0\20\6\5\0\2\6\7\0"+
    "\13\6\1\126\12\6\22\0\20\6\5\0\2\6\7\0"+
    "\1\6\1\127\4\6\1\130\12\6\1\131\4\6\22\0"+
    "\20\6\5\0\2\6\7\0\22\6\1\132\3\6\22\0"+
    "\20\6\5\0\2\6\7\0\2\6\1\133\23\6\22\0"+
    "\20\6\5\0\2\6\7\0\11\6\1\134\14\6\22\0"+
    "\20\6\5\0\2\6\7\0\11\6\1\135\1\6\1\136"+
    "\12\6\22\0\20\6\5\0\2\6\7\0\2\6\1\137"+
    "\5\6\1\140\15\6\22\0\20\6\5\0\2\6\7\0"+
    "\12\6\1\141\13\6\22\0\20\6\53\0\1\142\2\0"+
    "\1\143\104\0\1\144\1\145\105\0\1\146\1\147\104\0"+
    "\1\150\1\0\1\151\103\0\1\152\2\0\1\153\102\0"+
    "\1\154\105\0\1\155\34\0\2\6\7\0\26\6\22\0"+
    "\1\6\1\156\16\6\5\0\2\6\7\0\26\6\22\0"+
    "\6\6\1\157\11\6\5\0\2\6\7\0\26\6\22\0"+
    "\12\6\1\160\5\6\5\0\2\6\7\0\26\6\22\0"+
    "\14\6\1\161\3\6\5\0\2\6\7\0\26\6\22\0"+
    "\3\6\1\162\14\6\2\66\1\0\103\66\4\163\1\164"+
    "\101\163\6\0\1\73\77\0\2\74\1\0\103\74\2\77"+
    "\1\0\103\77\5\0\2\6\7\0\2\6\1\165\23\6"+
    "\22\0\20\6\5\0\2\6\7\0\3\6\1\166\3\6"+
    "\1\167\16\6\22\0\20\6\5\0\2\6\7\0\6\6"+
    "\1\170\17\6\22\0\20\6\5\0\2\6\7\0\17\6"+
    "\1\171\6\6\22\0\20\6\5\0\2\6\7\0\2\6"+
    "\1\172\23\6\22\0\20\6\5\0\2\6\7\0\10\6"+
    "\1\173\15\6\22\0\20\6\5\0\2\6\7\0\1\6"+
    "\1\174\24\6\22\0\20\6\5\0\2\6\7\0\6\6"+
    "\1\175\17\6\22\0\20\6\5\0\2\6\7\0\6\6"+
    "\1\176\17\6\22\0\20\6\5\0\2\6\7\0\12\6"+
    "\1\177\13\6\22\0\20\6\5\0\2\6\7\0\10\6"+
    "\1\200\15\6\22\0\20\6\5\0\2\6\7\0\7\6"+
    "\1\201\16\6\22\0\20\6\5\0\2\6\7\0\1\6"+
    "\1\202\24\6\22\0\20\6\5\0\2\6\7\0\14\6"+
    "\1\203\11\6\22\0\20\6\5\0\2\6\7\0\5\6"+
    "\1\204\17\6\1\205\22\0\20\6\5\0\2\6\7\0"+
    "\12\6\1\206\13\6\22\0\20\6\5\0\2\6\7\0"+
    "\3\6\1\207\22\6\22\0\20\6\5\0\2\6\7\0"+
    "\7\6\1\210\16\6\22\0\20\6\5\0\2\6\7\0"+
    "\3\6\1\211\22\6\22\0\20\6\5\0\2\6\7\0"+
    "\5\6\1\212\20\6\22\0\20\6\5\0\2\6\7\0"+
    "\7\6\1\213\16\6\22\0\20\6\5\0\2\6\7\0"+
    "\10\6\1\214\15\6\22\0\20\6\5\0\2\6\7\0"+
    "\12\6\1\215\13\6\22\0\20\6\5\0\2\6\7\0"+
    "\17\6\1\216\6\6\22\0\20\6\5\0\2\6\7\0"+
    "\4\6\1\217\21\6\22\0\20\6\5\0\2\6\7\0"+
    "\3\6\1\220\22\6\22\0\20\6\5\0\2\6\7\0"+
    "\17\6\1\221\6\6\22\0\20\6\5\0\2\6\7\0"+
    "\13\6\1\222\12\6\22\0\20\6\5\0\2\6\7\0"+
    "\26\6\22\0\2\6\1\223\15\6\5\0\2\6\7\0"+
    "\26\6\22\0\7\6\1\224\10\6\5\0\2\6\7\0"+
    "\26\6\22\0\2\6\1\225\15\6\5\0\2\6\7\0"+
    "\26\6\22\0\7\6\1\226\10\6\5\0\2\6\7\0"+
    "\26\6\22\0\16\6\1\227\1\6\3\163\1\230\1\164"+
    "\101\163\5\0\2\6\7\0\3\6\1\231\22\6\22\0"+
    "\20\6\5\0\2\6\7\0\13\6\1\232\12\6\22\0"+
    "\20\6\5\0\2\6\7\0\1\233\25\6\22\0\20\6"+
    "\5\0\2\6\7\0\3\6\1\234\3\6\1\235\16\6"+
    "\22\0\20\6\5\0\2\6\7\0\7\6\1\236\16\6"+
    "\22\0\20\6\5\0\2\6\7\0\7\6\1\237\16\6"+
    "\22\0\20\6\5\0\2\6\7\0\3\6\1\240\22\6"+
    "\22\0\20\6\5\0\2\6\7\0\1\241\25\6\22\0"+
    "\20\6\5\0\2\6\7\0\2\6\1\242\23\6\22\0"+
    "\20\6\5\0\2\6\7\0\6\6\1\243\17\6\22\0"+
    "\20\6\5\0\2\6\7\0\10\6\1\244\15\6\22\0"+
    "\20\6\5\0\2\6\7\0\1\6\1\245\24\6\22\0"+
    "\20\6\5\0\2\6\7\0\13\6\1\246\12\6\22\0"+
    "\20\6\5\0\2\6\7\0\11\6\1\247\14\6\22\0"+
    "\20\6\5\0\2\6\7\0\7\6\1\250\16\6\22\0"+
    "\20\6\5\0\2\6\7\0\5\6\1\251\20\6\22\0"+
    "\20\6\5\0\2\6\7\0\13\6\1\252\12\6\22\0"+
    "\20\6\5\0\2\6\7\0\16\6\1\253\7\6\22\0"+
    "\20\6\5\0\2\6\7\0\13\6\1\254\12\6\22\0"+
    "\20\6\5\0\2\6\7\0\1\6\1\255\24\6\22\0"+
    "\20\6\5\0\2\6\7\0\5\6\1\256\20\6\22\0"+
    "\20\6\5\0\2\6\7\0\2\6\1\257\23\6\22\0"+
    "\20\6\5\0\2\6\7\0\17\6\1\260\6\6\22\0"+
    "\20\6\5\0\2\6\7\0\2\6\1\261\23\6\22\0"+
    "\20\6\5\0\2\6\7\0\26\6\22\0\3\6\1\262"+
    "\14\6\5\0\2\6\7\0\26\6\22\0\10\6\1\263"+
    "\7\6\5\0\2\6\7\0\26\6\22\0\10\6\1\264"+
    "\7\6\5\0\2\6\7\0\26\6\22\0\17\6\1\265"+
    "\5\0\2\6\7\0\3\6\1\266\22\6\22\0\20\6"+
    "\5\0\2\6\7\0\22\6\1\267\3\6\22\0\20\6"+
    "\5\0\2\6\7\0\7\6\1\270\16\6\22\0\20\6"+
    "\5\0\2\6\7\0\10\6\1\271\15\6\22\0\20\6"+
    "\5\0\2\6\7\0\10\6\1\272\15\6\22\0\20\6"+
    "\5\0\2\6\7\0\1\273\25\6\22\0\20\6\5\0"+
    "\2\6\7\0\13\6\1\274\12\6\22\0\20\6\5\0"+
    "\2\6\7\0\7\6\1\275\16\6\22\0\20\6\5\0"+
    "\2\6\7\0\1\6\1\276\24\6\22\0\20\6\5\0"+
    "\2\6\7\0\20\6\1\277\5\6\22\0\20\6\5\0"+
    "\2\6\7\0\15\6\1\300\10\6\22\0\20\6\5\0"+
    "\2\6\7\0\14\6\1\301\11\6\22\0\20\6\5\0"+
    "\2\6\7\0\2\6\1\302\23\6\22\0\20\6\5\0"+
    "\2\6\7\0\12\6\1\303\13\6\22\0\20\6\5\0"+
    "\2\6\7\0\6\6\1\304\17\6\22\0\20\6\5\0"+
    "\2\6\7\0\13\6\1\305\12\6\22\0\20\6\5\0"+
    "\2\6\7\0\1\6\1\306\24\6\22\0\20\6\5\0"+
    "\2\6\7\0\5\6\1\307\20\6\22\0\20\6\5\0"+
    "\2\6\7\0\13\6\1\310\12\6\22\0\20\6\5\0"+
    "\2\6\7\0\24\6\1\311\1\6\22\0\20\6\5\0"+
    "\2\6\7\0\26\6\22\0\4\6\1\312\13\6\5\0"+
    "\2\6\7\0\26\6\22\0\2\6\1\313\15\6\5\0"+
    "\2\6\7\0\26\6\22\0\13\6\1\314\4\6\5\0"+
    "\2\6\7\0\6\6\1\315\17\6\22\0\20\6\5\0"+
    "\2\6\7\0\1\316\25\6\22\0\20\6\5\0\2\6"+
    "\7\0\22\6\1\317\3\6\22\0\20\6\5\0\2\6"+
    "\7\0\10\6\1\320\15\6\22\0\20\6\5\0\2\6"+
    "\7\0\1\6\1\321\24\6\22\0\20\6\5\0\2\6"+
    "\7\0\13\6\1\322\12\6\22\0\20\6\5\0\2\6"+
    "\7\0\6\6\1\323\17\6\22\0\20\6\5\0\2\6"+
    "\7\0\6\6\1\324\17\6\22\0\20\6\5\0\2\6"+
    "\7\0\17\6\1\325\6\6\22\0\20\6\5\0\2\6"+
    "\7\0\13\6\1\326\12\6\22\0\20\6\5\0\2\6"+
    "\7\0\1\6\1\327\24\6\22\0\20\6\5\0\2\6"+
    "\7\0\6\6\1\330\17\6\22\0\20\6\5\0\2\6"+
    "\7\0\26\6\22\0\5\6\1\331\12\6\5\0\2\6"+
    "\7\0\5\6\1\332\20\6\22\0\20\6\5\0\2\6"+
    "\7\0\11\6\1\333\14\6\22\0\20\6\5\0\2\6"+
    "\7\0\25\6\1\334\22\0\20\6\5\0\2\6\7\0"+
    "\1\335\25\6\22\0\20\6\5\0\2\6\7\0\3\6"+
    "\1\336\22\6\22\0\20\6\5\0\2\6\7\0\7\6"+
    "\1\337\16\6\22\0\20\6\5\0\2\6\7\0\13\6"+
    "\1\340\12\6\22\0\20\6\5\0\2\6\7\0\6\6"+
    "\1\341\17\6\22\0\20\6\5\0\2\6\7\0\13\6"+
    "\1\342\12\6\22\0\20\6\5\0\2\6\7\0\11\6"+
    "\1\343\14\6\22\0\20\6\5\0\2\6\7\0\4\6"+
    "\1\344\21\6\22\0\20\6";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10640];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\5\1\1\11\2\1\3\11\21\1\7\11"+
    "\1\1\2\11\6\1\2\11\7\1\3\11\1\1\1\0"+
    "\1\11\3\0\1\11\40\1\14\11\6\1\1\0\43\1"+
    "\1\11\114\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[228];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public _MonkeyCLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _MonkeyCLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 176) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 5: 
          { return IDENTIFIER;
          }
        case 91: break;
        case 54: 
          { return BLOCK_COMMENT;
          }
        case 92: break;
        case 58: 
          { return TRY;
          }
        case 93: break;
        case 17: 
          { return LPAREN;
          }
        case 94: break;
        case 55: 
          { return AND;
          }
        case 95: break;
        case 74: 
          { return WHILE;
          }
        case 96: break;
        case 50: 
          { return SUBEQ;
          }
        case 97: break;
        case 70: 
          { return CONST;
          }
        case 98: break;
        case 64: 
          { return TRUE;
          }
        case 99: break;
        case 16: 
          { return RBRACKET;
          }
        case 100: break;
        case 27: 
          { return PERCENT;
          }
        case 101: break;
        case 78: 
          { return STATIC;
          }
        case 102: break;
        case 35: 
          { return NUMBER;
          }
        case 103: break;
        case 46: 
          { return AMPEQ;
          }
        case 104: break;
        case 12: 
          { return COLON;
          }
        case 105: break;
        case 9: 
          { return STRING_B;
          }
        case 106: break;
        case 61: 
          { return AMP;
          }
        case 107: break;
        case 75: 
          { return BREAK;
          }
        case 108: break;
        case 23: 
          { return EQ;
          }
        case 109: break;
        case 67: 
          { return VOID;
          }
        case 110: break;
        case 60: 
          { return HAS;
          }
        case 111: break;
        case 20: 
          { return BAR;
          }
        case 112: break;
        case 86: 
          { return EXTENDS;
          }
        case 113: break;
        case 52: 
          { return BANGEQ;
          }
        case 114: break;
        case 49: 
          { return PLUSPLUS;
          }
        case 115: break;
        case 28: 
          { return CARET;
          }
        case 116: break;
        case 81: 
          { return RETURN;
          }
        case 117: break;
        case 76: 
          { return SUPER;
          }
        case 118: break;
        case 2: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 119: break;
        case 72: 
          { return USING;
          }
        case 120: break;
        case 8: 
          { return STRING_A;
          }
        case 121: break;
        case 15: 
          { return LBRACKET;
          }
        case 122: break;
        case 42: 
          { return BARBAR;
          }
        case 123: break;
        case 69: 
          { return CATCH;
          }
        case 124: break;
        case 19: 
          { return COMMA;
          }
        case 125: break;
        case 82: 
          { return MODULE;
          }
        case 126: break;
        case 24: 
          { return PLUS;
          }
        case 127: break;
        case 80: 
          { return NATIVE;
          }
        case 128: break;
        case 48: 
          { return PLUSEQ;
          }
        case 129: break;
        case 45: 
          { return EQEQ;
          }
        case 130: break;
        case 63: 
          { return NULL;
          }
        case 131: break;
        case 21: 
          { return LT;
          }
        case 132: break;
        case 79: 
          { return SWITCH;
          }
        case 133: break;
        case 32: 
          { return SLASHEQ;
          }
        case 134: break;
        case 68: 
          { return CLASS;
          }
        case 135: break;
        case 66: 
          { return ENUM;
          }
        case 136: break;
        case 7: 
          { return DOT;
          }
        case 137: break;
        case 31: 
          { return MULTI_LINE_COMMENT_START;
          }
        case 138: break;
        case 87: 
          { return DEFAULT;
          }
        case 139: break;
        case 41: 
          { return DO;
          }
        case 140: break;
        case 43: 
          { return CARETEQ;
          }
        case 141: break;
        case 10: 
          { return SEMI;
          }
        case 142: break;
        case 71: 
          { return FALSE;
          }
        case 143: break;
        case 14: 
          { return RBRACE;
          }
        case 144: break;
        case 77: 
          { return BAREQ;
          }
        case 145: break;
        case 57: 
          { return NEW;
          }
        case 146: break;
        case 22: 
          { return GT;
          }
        case 147: break;
        case 37: 
          { return CHARLITERAL;
          }
        case 148: break;
        case 84: 
          { return THROWS;
          }
        case 149: break;
        case 47: 
          { return AMPAMP;
          }
        case 150: break;
        case 25: 
          { return SUB;
          }
        case 151: break;
        case 33: 
          { return MULTI_LINE_COMMENT_END;
          }
        case 152: break;
        case 83: 
          { return HIDDEN;
          }
        case 153: break;
        case 36: 
          { return STRINGLITERAL;
          }
        case 154: break;
        case 53: 
          { return PERCENTEQ;
          }
        case 155: break;
        case 88: 
          { return CONTINUE;
          }
        case 156: break;
        case 40: 
          { return OR;
          }
        case 157: break;
        case 13: 
          { return LBRACE;
          }
        case 158: break;
        case 29: 
          { return TILDE;
          }
        case 159: break;
        case 59: 
          { return VAR;
          }
        case 160: break;
        case 89: 
          { return FUNCTION;
          }
        case 161: break;
        case 3: 
          { return SLASH;
          }
        case 162: break;
        case 73: 
          { return THROW;
          }
        case 163: break;
        case 65: 
          { return ELSE;
          }
        case 164: break;
        case 39: 
          { return IF;
          }
        case 165: break;
        case 6: 
          { return INTEGER;
          }
        case 166: break;
        case 4: 
          { return STAR;
          }
        case 167: break;
        case 90: 
          { return INSTANCEOF;
          }
        case 168: break;
        case 51: 
          { return SUBSUB;
          }
        case 169: break;
        case 30: 
          { return SINGLE_LINE_COMMENT;
          }
        case 170: break;
        case 85: 
          { return FINALLY;
          }
        case 171: break;
        case 1: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 172: break;
        case 56: 
          { return FOR;
          }
        case 173: break;
        case 44: 
          { return EQGT;
          }
        case 174: break;
        case 62: 
          { return CASE;
          }
        case 175: break;
        case 18: 
          { return RPAREN;
          }
        case 176: break;
        case 34: 
          { return STAREQ;
          }
        case 177: break;
        case 26: 
          { return BANG;
          }
        case 178: break;
        case 11: 
          { return QUES;
          }
        case 179: break;
        case 38: 
          { return AS;
          }
        case 180: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
